trigger:
- master

name: 'ODataConnectedService'

pool:
  vmImage: 'windows-latest'

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  connectedServiceDir: '$(Build.SourcesDirectory)'
  sln: '$(connectedServiceDir)\ODataConnectedService.sln'
  testSln: '$(connectedServiceDir)\ODataConnectedService.Tests.sln'
  productBinPath: '$(connectedServiceDir)\src\bin\$(BuildConfiguration)'
  productFiles: 'Microsoft.OData.ConnectedService.*?(*.dll|*.config|*.pdb)'
  testBinPath: '$(connectedServiceDir)\test\ODataConnectedService.Tests\bin\$(BuildConfiguration)\'
  vsixPath: '$(productBinPath)'
  vsixFile: 'Microsoft.OData.ConnectedService.vsix'
  signingFiles: 'Microsoft.OData.ConnectedService.dll'
  mainDll: 'Microsoft.OData.ConnectedService.dll'
  testDll: 'ODataConnectedService.Tests.dll'
  snExe: 'C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\sn.exe'
  snExe64: 'C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\sn.exe'

steps:
- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '>=5.2.0'

- task: NuGetCommand@2
  displayName: 'Nuget restore - ODataConnectedService.sln'
  inputs:
    restoreSolution: '$(sln)'

- task: VSBuild@1
  displayName: 'Build solution - ODataConnectedService.sln'
  inputs:
    solution: '$(sln)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: NuGetCommand@2
  displayName: 'Nuget restore tests - ODataConnectedServiceTests.sln'
  inputs:
    restoreSolution: '$(testSln)'

- task: VSBuild@1
  displayName: 'Build tests solution - ODataConnectedServiceTests.sln'
  inputs:
    solution: '$(testSln)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# because the assemblies are delay-signed, we need to disable
# strong name validation so that the tests may run,
# otherwise our assemblies will fail to load
- task: Powershell@2
  displayName: 'Skip strong name validation'
  inputs:
    targetType: 'inline'
    script: |
      & "$(snExe)" /Vr $(productBinPath)\$(mainDll)
      & "$(snExe64)" /Vr $(productBinPath)\$(mainDll)
      & "$(snExe)" /Vr $(testBinPath)\$(testDll)
      & "$(snExe64)" /Vr $(testBinPath)\$(testDll)

- task: VSTest@2
  displayName: 'Run tests'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '$(testBinPath)\$(testDll)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    searchFolder:  '$(System.DefaultWorkingDirectory)'

- task: Powershell@2
  displayName: 'Re-enable strong name validation'
  inputs:
    targetType: 'inline'
    script: |
      & "$(snExe)" /Vu $(productBinPath)\$(mainDll)
      & "$(snExe64)" /Vu $(productBinPath)\$(mainDll)
      & "$(snExe)" /Vu $(testBinPath)\$(testDll)
      & "$(snExe64)" /Vu $(testBinPath)\$(testDll)

# sign the connected service assembly      
- task: EsrpCodeSigning@1
  displayName: 'ESRP CodeSign - Sign Binaries'
  inputs:
    ConnectedServiceName: "ESRP CodeSigning - OData"
    FolderPath: '$(productBinPath)'
    Pattern: '$(mainDll)'
    signConfigType: 'inlineSignParams'
    inlineOperation: |
      [
        {
          "keyCode": "MSSharedLibSnKey",
          "operationSetCode": "StrongNameSign",
          "parameters": null,
          "toolName": "sn.exe",
          "toolVersion": "V4.6.1586.0"
        },
        {
          "keyCode": "MSSharedLibSnKey",
          "operationSetCode": "StrongNameVerify",
          "parameters": null,
          "toolName": "sn.exe",
          "toolVersion": "V4.6.1586.0"
        },
        {
          "keyCode": "CP-230012",
          "operationSetCode": "SigntoolSign",
          "parameters": [
          {
            "parameterName": "OpusName",
            "parameterValue": "TestSign"
          },
          {
            "parameterName": "OpusInfo",
            "parameterValue": "http://test"
          },
          {
            "parameterName": "PageHash",
            "parameterValue": "/NPH"
          },
          {
            "parameterName": "TimeStamp",
            "parameterValue": "/t \"http://ts4096.gtm.microsoft.com/TSS/AuthenticodeTS\""
          }
          ],
          "toolName": "signtool.exe",
          "toolVersion": "6.2.9304.0"
        },
        {
          "keyCode": "CP-230012",
          "operationSetCode": "SigntoolSign",
          "parameters": [
          {
            "parameterName": "OpusName",
            "parameterValue": "TestSign"
          },
          {
            "parameterName": "OpusInfo",
            "parameterValue": "http://test"
          },
          {
            "parameterName": "Append",
            "parameterValue": "/AS"
          },
          {
            "parameterName": "PageHash",
            "parameterValue": "/NPH"
          },
          {
            "parameterName": "FileDigest",
            "parameterValue": "/fd sha256"
          },
          {
            "parameterName": "TimeStamp",
            "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
          }
          ],
          "toolName": "signtool.exe",
          "toolVersion": "6.2.9304.0"
        },
        {
          "keyCode": "CP-230012",
          "operationSetCode": "SigntoolVerify",
          "parameters": [
          {
            "parameterName": "VerifyAll",
            "parameterValue": "/all"
          }
          ],
          "toolName": "signtool.exe",
          "toolVersion": "6.2.9304.0"
        }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'

- task: CopyFiles@2
  displayName: 'Copy Files - VSIX to Artifacts Staging'
  inputs:
    SourceFolder: '$(productBinPath)'
    Contents: 'Microsoft.OData.ConnectedService.vsix'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\VSIX'

- task: CopyFiles@2
  displayName: 'Copy Files - Stage Product'
  inputs:
    SourceFolder: '$(productBinPath)'
    Contents: '$(productFiles)'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Product'

# this allows to download the built dll as an artifact (without the vsix)
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact - Product'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\Product'
    ArtifactName: 'Product'
    publishLocation: 'Container'

# extract the vsix so that we can replace the .dll inside the vsix with a signed version
- task: ExtractFiles@1
  displayName: 'Extract Files - Unpack VSIX copy'
  inputs:
    archiveFilePatterns: '$(vsixPath)\$(vsixFile)'
    destinationFolder: '$(Build.ArtifactStagingDirectory)\VSIXStaging'
    cleanDestinationFolder: true

# replace the .dll inside the vsix with the one that was signed
- task: CopyFiles@2
  displayName: 'Copy Files - Signed Binaries to VSIX'
  inputs:
    SourceFolder: '$(productBinPath)'
    Contents: '$(signingFiles)'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\VSIXStaging'
    OverWrite: true

# repackage the vsix that now contains the signed assembly
- task: ArchiveFiles@2
  displayName: 'Archive files - Pack VSIX'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\VSIXStaging'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)\VSIX\$(vsixFile)'
    replaceExistingArchive: true

# signed the entire vsix package as well
- task: EsrpCodeSigning@1
  displayName: 'ESRP CodeSigning - VSIX Signing'
  inputs:
    ConnectedServiceName: 'ESRP CodeSigning - OData'
    FolderPath: '$(Build.ArtifactStagingDirectory)\VSIX'
    Pattern: '$(vsixFile)'
    signConfigType: 'inlineSignParams'
    inlineOperation: |
      [
        {
          "keyCode": "CP-233016",
          "operationSetCode": "OpcSign",
          "parameters": [
            {
              "parameterName": "FileDigest",
              "parameterValue": "/fd SHA256"
            }
          ],
          "toolName": "Opcsigntool.exe",
          "tooVersion": "V6.2.8189.0"
        },
        {
          "keyCode": "CP-233016",
          "operationSetCode": "OpcVerify",
          "parameters": null,
          "toolName": "Opcsigntool.exe",
          "tooVersion": "V6.2.8189.0"
        }
      ]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'

# publish the vsix as an artifact so we can download it after the build
- task: PublishBuildArtifacts@1
  displayName: 'Public Artifact: VSIX'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/VSIX'
    ArtifactName: 'VSIX'
    publishLocation: 'Container'
